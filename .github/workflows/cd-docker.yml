name: CD Docker

on:
  workflow_call:
    inputs:
      watch:
        type: string
        default: src
      environment:
        type: string
        default: prd
      app_name:
        required: true
        type: string
      download_artifact:
        type: boolean
        default: true
    outputs:
      image-id:
        value: ${{ jobs.cd-docker.outputs.image-id || jobs.cd-redeploy.outputs.image-id }}

jobs:
  watch-filter:
    name: Check for application changes
    permissions:
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      found-changes: ${{ steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      name: Check for application changes
      id: filter
      with:
        filters: |
          changes:
            - '${{ inputs.watch }}/**'
  cd-docker:
    name: CD Docker
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: watch-filter
    if: needs.watch-filter.outputs.found-changes == 'true'
    outputs:
      image-id: ${{ steps.docker-build.outputs.imageid }}
    steps:
      - uses: actions/checkout@v4
      - id: auth
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets[format('{0}_PROVIDER_NAME', inputs.environment)] }}
          service_account: ${{ secrets[format('{0}_SA_EMAIL', inputs.environment)] }}
          token_format: 'access_token'
      - id: login-gcr
        name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: eu.gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - id: download-artifact
        name: Download artifact
        if: inputs.download_artifact
        uses: dawidd6/action-download-artifact@v2.28.0
        with:
          pr: ${{ github.event.pull_request.number }}
          workflow: ci.yml
          name: ${{ github.event.pull_request.number }}-${{ inputs.app_name }}
          path: build/libs
      - id: meta
        name: Docker meta
        uses: docker/metadata-action@v5
        with:
          images: |
            eu.gcr.io/entur-system-1287/${{ inputs.app_name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Set up Docker build
        uses: docker/setup-buildx-action@v3
      - id: docker-build
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  cd-redeploy:
    name: CD redeploy
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: watch-filter
    if: needs.watch-filter.outputs.found-changes == 'false'
    outputs:
      image-id: ${{ steps.get-image.outputs.image-id }}
    steps:
    - id: auth
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets[format('{0}_PROVIDER_NAME', inputs.environment)] }}
        service_account: ${{ secrets[format('{0}_SA_EMAIL', inputs.environment)] }}
    - id: get-credentials
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        project_id: ${{ secrets[format('{0}_CLUSTER_PROJECT_ID', inputs.environment)] }}
        cluster_name: ${{ secrets[format('{0}_CLUSTER_NAME', inputs.environment)] }}
        location: ${{ secrets[format('{0}_CLUSTER_LOCATION', inputs.environment)] }}
    - id: get-image
      # TODO: accept release name as well, this will not work when ns != releasename
      run: |
        image=$(kubectl get deployment -n ${{ inputs.app_name }} ${{ inputs.app_name }} -o=jsonpath='{$.spec.template.spec.containers[].image}')
        echo "image-id=${image#*:}" >> "$GITHUB_OUTPUT"
